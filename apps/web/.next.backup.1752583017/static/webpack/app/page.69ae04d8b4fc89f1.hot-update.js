"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/ui/NeuronicBackground.tsx":
/*!**************************************************!*\
  !*** ./src/components/ui/NeuronicBackground.tsx ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ NeuronicBackground; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/../../node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nfunction NeuronicBackground(param) {\n    let { className = \"\", opacity = 0.4, nodeCount = 35, connectionDistance = 150, pulseSpeed = 0.015 // Slower, calmer animation\n     } = param;\n    _s();\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const animationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const nodesRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n        // Initialize nodes\n        const initializeNodes = ()=>{\n            nodesRef.current = [];\n            for(let i = 0; i < nodeCount; i++){\n                nodesRef.current.push({\n                    x: Math.random() * canvas.width,\n                    y: Math.random() * canvas.height,\n                    vx: (Math.random() - 0.5) * 0.5,\n                    vy: (Math.random() - 0.5) * 0.5,\n                    pulse: Math.random() * Math.PI * 2,\n                    pulseDirection: Math.random() > 0.5 ? 1 : -1,\n                    connections: [],\n                    energy: Math.random(),\n                    lightningCharge: Math.random() * Math.PI * 2\n                });\n            }\n        };\n        // Resize canvas\n        const resizeCanvas = ()=>{\n            canvas.width = window.innerWidth;\n            canvas.height = window.innerHeight;\n            initializeNodes();\n        };\n        // Calculate connections\n        const calculateConnections = ()=>{\n            nodesRef.current.forEach((node, i)=>{\n                node.connections = [];\n                nodesRef.current.forEach((otherNode, j)=>{\n                    if (i !== j) {\n                        const dx = node.x - otherNode.x;\n                        const dy = node.y - otherNode.y;\n                        const distance = Math.sqrt(dx * dx + dy * dy);\n                        if (distance < connectionDistance) {\n                            node.connections.push(j);\n                        }\n                    }\n                });\n            });\n        };\n        // Animation loop\n        const animate = ()=>{\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            // Update nodes\n            nodesRef.current.forEach((node)=>{\n                // Update position\n                node.x += node.vx;\n                node.y += node.vy;\n                // Bounce off edges\n                if (node.x <= 0 || node.x >= canvas.width) node.vx *= -1;\n                if (node.y <= 0 || node.y >= canvas.height) node.vy *= -1;\n                // Keep nodes in bounds\n                node.x = Math.max(0, Math.min(canvas.width, node.x));\n                node.y = Math.max(0, Math.min(canvas.height, node.y));\n                // Update pulse and lightning energy\n                node.pulse += pulseSpeed * node.pulseDirection;\n                if (node.pulse > Math.PI * 2) node.pulse = 0;\n                if (node.pulse < 0) node.pulse = Math.PI * 2;\n                // Update lightning charge for electric effects (reduced intensity)\n                node.lightningCharge += pulseSpeed * 1.5;\n                node.energy = Math.sin(node.lightningCharge) * 0.3 + 0.4;\n            });\n            // Recalculate connections\n            calculateConnections();\n            // Draw connections\n            nodesRef.current.forEach((node, i)=>{\n                node.connections.forEach((connectionIndex)=>{\n                    const otherNode = nodesRef.current[connectionIndex];\n                    if (otherNode) {\n                        const dx = node.x - otherNode.x;\n                        const dy = node.y - otherNode.y;\n                        const distance = Math.sqrt(dx * dx + dy * dy);\n                        const alpha = (1 - distance / connectionDistance) * opacity * 0.9 // Much more visible\n                        ;\n                        // Lightning-inspired electric connections with high visibility\n                        const pulseIntensity = (Math.sin(node.pulse) + Math.sin(otherNode.pulse)) / 2;\n                        const lightningEnergy = (node.energy + otherNode.energy) / 2;\n                        const electricIntensity = Math.sin(Date.now() * 0.008 + distance * 0.05) * 0.4 + 0.9 // More dynamic\n                        ;\n                        const connectionAlpha = alpha * (0.8 + pulseIntensity * 0.4 + lightningEnergy * 0.3 // Brighter connections\n                        );\n                        // Electric lightning colors - much more visible and vibrant\n                        const electricColor = lightningEnergy > 0.7 ? \"rgba(100, 200, 255, \".concat(connectionAlpha * electricIntensity, \")\") // Bright cyan-blue\n                         : \"rgba(60, 150, 255, \".concat(connectionAlpha, \")\") // Electric blue\n                        ;\n                        ctx.strokeStyle = electricColor;\n                        ctx.lineWidth = 2 + lightningEnergy * 2.5 // Thicker lines\n                        ;\n                        // Enhanced electric glow for better visibility\n                        ctx.shadowColor = electricColor;\n                        ctx.shadowBlur = 8 + lightningEnergy * 12 // More pronounced glow\n                        ;\n                        ctx.beginPath();\n                        ctx.moveTo(node.x, node.y);\n                        // More visible lightning-style jagged connections\n                        if (lightningEnergy > 0.8) {\n                            const midX = (node.x + otherNode.x) / 2 + (Math.random() - 0.5) * 20;\n                            const midY = (node.y + otherNode.y) / 2 + (Math.random() - 0.5) * 20;\n                            ctx.lineTo(midX, midY);\n                            ctx.lineTo(otherNode.x, otherNode.y);\n                        } else {\n                            ctx.lineTo(otherNode.x, otherNode.y);\n                        }\n                        ctx.stroke();\n                        ctx.shadowBlur = 0;\n                    }\n                });\n            });\n            // Draw lightning-charged nodes with electric energy - much more visible\n            nodesRef.current.forEach((node)=>{\n                const pulseIntensity = Math.sin(node.pulse) * 0.5 + 0.5;\n                const electricCharge = node.energy;\n                const nodeOpacity = opacity * (0.9 + pulseIntensity * 0.4 + electricCharge * 0.3 // More visible\n                );\n                const nodeSize = 6 + pulseIntensity * 6 + electricCharge * 4 // Larger nodes\n                ;\n                const isHighEnergy = electricCharge > 0.7 // Lower threshold for high energy\n                ;\n                // Lightning-charged node with vibrant electric colors\n                const nodeColor = isHighEnergy ? \"rgba(120, 220, 255, \".concat(nodeOpacity, \")\") // Bright cyan\n                 : \"rgba(80, 160, 255, \".concat(nodeOpacity, \")\") // Electric blue\n                ;\n                // Enhanced electric glow for high energy nodes\n                if (isHighEnergy) {\n                    ctx.shadowColor = \"rgba(120, 220, 255, 0.8)\" // More vibrant glow\n                    ;\n                    ctx.shadowBlur = 15 + electricCharge * 10 // Stronger glow\n                    ;\n                }\n                ctx.fillStyle = nodeColor;\n                ctx.beginPath();\n                ctx.arc(node.x, node.y, nodeSize, 0, Math.PI * 2);\n                ctx.fill();\n                // Electric core - bright but controlled for lightning nodes\n                const coreColor = isHighEnergy ? \"rgba(240, 250, 255, \".concat(nodeOpacity, \")\") : \"rgba(180, 220, 255, \".concat(nodeOpacity * 0.9, \")\");\n                ctx.fillStyle = coreColor;\n                ctx.beginPath();\n                ctx.arc(node.x, node.y, nodeSize * 0.5, 0, Math.PI * 2);\n                ctx.fill();\n                ctx.shadowBlur = 0;\n                // Electric lightning glow with controlled inspirational energy\n                const glowRadius = nodeSize + pulseIntensity * 15 + electricCharge * 8;\n                const gradient = ctx.createRadialGradient(node.x, node.y, 0, node.x, node.y, glowRadius);\n                if (isHighEnergy) {\n                    // Bright but controlled glow for high energy nodes\n                    gradient.addColorStop(0, \"rgba(220, 240, 255, \".concat(nodeOpacity * 1.2, \")\"));\n                    gradient.addColorStop(0.1, \"rgba(180, 220, 255, \".concat(nodeOpacity * 1.0, \")\"));\n                    gradient.addColorStop(0.3, \"rgba(140, 190, 255, \".concat(nodeOpacity * 0.7, \")\"));\n                    gradient.addColorStop(0.6, \"rgba(100, 150, 255, \".concat(nodeOpacity * 0.4, \")\"));\n                    gradient.addColorStop(1, \"rgba(60, 120, 200, 0)\");\n                } else {\n                    // Electric blue glow for regular nodes\n                    gradient.addColorStop(0, \"rgba(180, 220, 255, \".concat(nodeOpacity * 1.1, \")\"));\n                    gradient.addColorStop(0.2, \"rgba(140, 190, 255, \".concat(nodeOpacity * 0.8, \")\"));\n                    gradient.addColorStop(0.5, \"rgba(100, 160, 255, \".concat(nodeOpacity * 0.5, \")\"));\n                    gradient.addColorStop(0.8, \"rgba(80, 130, 220, \".concat(nodeOpacity * 0.3, \")\"));\n                    gradient.addColorStop(1, \"rgba(60, 110, 200, 0)\");\n                }\n                ctx.fillStyle = gradient;\n                ctx.beginPath();\n                ctx.arc(node.x, node.y, glowRadius, 0, Math.PI * 2);\n                ctx.fill();\n            });\n            animationRef.current = requestAnimationFrame(animate);\n        };\n        // Initialize\n        resizeCanvas();\n        window.addEventListener(\"resize\", resizeCanvas);\n        animate();\n        return ()=>{\n            window.removeEventListener(\"resize\", resizeCanvas);\n            if (animationRef.current) {\n                cancelAnimationFrame(animationRef.current);\n            }\n        };\n    }, [\n        opacity,\n        nodeCount,\n        connectionDistance,\n        pulseSpeed\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n        ref: canvasRef,\n        className: \"fixed inset-0 pointer-events-none z-0 \".concat(className),\n        style: {\n            opacity\n        }\n    }, void 0, false, {\n        fileName: \"/app/apps/web/src/components/ui/NeuronicBackground.tsx\",\n        lineNumber: 245,\n        columnNumber: 5\n    }, this);\n}\n_s(NeuronicBackground, \"eE7rkxSEFP3rCBRXkDJ01N1IvKk=\");\n_c = NeuronicBackground;\nvar _c;\n$RefreshReg$(_c, \"NeuronicBackground\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/ui/NeuronicBackground.tsx\n"));

/***/ })

});